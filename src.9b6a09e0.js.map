{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerId","document","querySelector","secs","mins","hours","days","getTimeRemaining","initTimer","time","Date","parse","Math","floor","setInterval","t","textContent","console","log","clearInterval","timer1","timer2"],"mappings":";;;AAwDA,aAxDA,QAAA,oBAEA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBC,KAAAA,QAAU,KACVD,KAAAA,WAAaA,EACbD,KAAAA,SAAWG,SAASC,cAAcJ,GAClCK,KAAAA,KAAO,KAAKL,SAASI,cAAc,uBACnCE,KAAAA,KAAO,KAAKN,SAASI,cAAc,uBACnCG,KAAAA,MAAQ,KAAKP,SAASI,cAAc,wBACpCI,KAAAA,KAAO,KAAKR,SAASI,cAAc,uBAEnCK,KAAAA,mBACAC,KAAAA,YAGPD,mBACQE,MAAAA,EAAOC,KAAKC,MAAM,KAAKZ,YAAcW,KAAKC,MAAM,IAAID,MAKnD,MAAA,CACLD,KAAAA,EACAH,KANWM,KAAKC,MAAMJ,EAAQ,OAO9BJ,MANYO,KAAKC,MAAOJ,EAAQ,MAAyB,MAOzDL,KANWQ,KAAKC,MAAOJ,EAAQ,KAAoB,KAOnDN,KANWS,KAAKC,MAAOJ,EAAQ,IAAc,MAUjDD,YACOR,KAAAA,QAAUc,YAAY,KACnBC,MAAAA,EAAI,KAAKR,mBACVJ,KAAAA,KAAKa,YAAcD,EAAEZ,KAAO,OAASY,EAAEZ,OAASY,EAAEZ,KAClDC,KAAAA,KAAKY,YAAcD,EAAEX,KAAO,OAASW,EAAEX,OAASW,EAAEX,KAClDC,KAAAA,MAAMW,YAAcD,EAAEV,MAAQ,OAASU,EAAEV,QAAUU,EAAEV,MACrDC,KAAAA,KAAKU,YAAcD,EAAET,KAAO,OAASS,EAAET,OAASS,EAAET,KACvDW,QAAQC,IAAIH,EAAEZ,MACVY,EAAEN,MAAQ,IACZU,cAAc,KAAKnB,SACdG,KAAAA,KAAKa,YAAc,KACnBZ,KAAAA,KAAKY,YAAc,KACnBX,KAAAA,MAAMW,YAAc,KACpBV,KAAAA,KAAKU,YAAc,KACxBC,QAAQC,IAAI,gDAEb,MAIP,MAAME,EAAS,IAAIxB,EAAe,CAChCE,SAAU,WACVC,WAAY,IAAIW,KAAK,kBAGjBW,EAAS,IAAIzB,EAAe,CAChCE,SAAU,WACVC,WAAY,IAAIW,KAAK","file":"src.9b6a09e0.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.timerId = null;\r\n    this.targetDate = targetDate;\r\n    this.selector = document.querySelector(selector);\r\n    this.secs = this.selector.querySelector(\"[data-value='secs']\");\r\n    this.mins = this.selector.querySelector(\"[data-value='mins']\");\r\n    this.hours = this.selector.querySelector(\"[data-value='hours']\");\r\n    this.days = this.selector.querySelector(\"[data-value='days']\");\r\n\r\n    this.getTimeRemaining();\r\n    this.initTimer();\r\n  }\r\n\r\n  getTimeRemaining() {\r\n    const time = Date.parse(this.targetDate) - Date.parse(new Date());\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n    return {\r\n      time,\r\n      days,\r\n      hours,\r\n      mins,\r\n      secs,\r\n    };\r\n  }\r\n\r\n  initTimer() {\r\n    this.timerId = setInterval(() => {\r\n      const t = this.getTimeRemaining();\r\n      this.secs.textContent = t.secs < 10 ? `0${t.secs}` : t.secs;\r\n      this.mins.textContent = t.mins < 10 ? `0${t.mins}` : t.mins;\r\n      this.hours.textContent = t.hours < 10 ? `0${t.hours}` : t.hours;\r\n      this.days.textContent = t.days < 10 ? `0${t.days}` : t.days;\r\n      console.log(t.secs);\r\n      if (t.time <= 0) {\r\n        clearInterval(this.timerId);\r\n        this.secs.textContent = '00';\r\n        this.mins.textContent = '00';\r\n        this.hours.textContent = '00';\r\n        this.days.textContent = '00';\r\n        console.log('targetDate должна быть больше текущей даты');\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n\r\nconst timer1 = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2022'),\r\n});\r\n\r\nconst timer2 = new CountdownTimer({\r\n  selector: '#timer-2',\r\n  targetDate: new Date('Sep 26, 2022'),\r\n});\r\n"]}